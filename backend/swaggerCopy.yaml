openapi: 3.0.3
info:
  title: Eccomerce Website B2B - OpenAPI 3.0
  description: |-
    This is used to help test the endpoints that are used in the ecccomrce
servers:
  - url: http://localhost:5000/api
tags:
  - name: Product
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: Shipping
    description: Operations related to shipping
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /product:
    get:
      tags:
        - Product
      summary: Get all products
      description: Retrieve a list of all products
      operationId: getAllProducts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - Product
      summary: Add a new product
      description: Add a new product to the store
      operationId: addProduct
      requestBody:
        description: New product object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '422':
          description: Unprocessable entity
  /product/{id}:
    get:
      tags:
        - Product
      summary: Get a product by ID
      description: Get a product by its ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      tags:
        - Product
      summary: Update an existing product
      description: Update an existing product by ID
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: ID of the product to update
          required: true
          schema:
            type: string
      requestBody:
        description: Updated product object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '422':
          description: Unprocessable entity
    delete:
      tags:
        - Product
      summary: Delete a product
      description: Delete a product by ID
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: ID of the product to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
  /shipping:
    get:
      tags:
        - Shipping
      summary: Get all shipping addresses
      description: Retrieve a list of all shipping addresses
      operationId: getAllShippingAddresses
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShippingAddress'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShippingAddress'
    post:
      tags:
        - Shipping
      summary: Add a new shipping address
      description: Add a new shipping address to the store
      operationId: addShippingAddress
      requestBody:
        description: New shipping address object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingAddress'
          application/xml:
            schema:
              $ref: '#/components/schemas/ShippingAddress'
      responses:
        '201':
          description: Shipping address added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingAddress'
            application/xml:
              schema:
                $ref: '#/components/schemas/ShippingAddress'
        '422':
          description: Unprocessable entity
  /shipping/{id}:
    get:
      tags:
        - Shipping
      summary: Get a shipping address by ID
      description: Get a shipping address by its ID
      operationId: getShippingAddressById
      parameters:
        - name: id
          in: path
          description: ID of the shipping address to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingAddress'
            application/xml:
              schema:
                $ref: '#/components/schemas/ShippingAddress'
        '404':
          description: Shipping address not found
    put:
      tags:
        - Shipping
      summary: Update an existing shipping address
      description: Update an existing shipping address by ID
      operationId: updateShippingAddress
      parameters:
        - name: id
          in: path
          description: ID of the shipping address to update
          required: true
          schema:
            type: string
      requestBody:
        description: Updated shipping address object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingAddress'
          application/xml:
            schema:
              $ref: '#/components/schemas/ShippingAddress'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingAddress'
            application/xml:
              schema:
                $ref: '#/components/schemas/ShippingAddress'
        '404':
          description: Shipping address not found
        '422':
          description: Unprocessable entity
  /signup:
    post:
      tags:
        - user
      summary: Create a new user
      description: Create a new user account
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '201':
          description: User created successfully
        '422':
          description: Unprocessable entity
  /users:
    get:
      tags:
        - user
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getAllUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - user
      summary: Add a new user
      description: Add a new user to the system
      operationId: addUser
      requestBody:
        description: New user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User added successfully
        '422':
          description: Unprocessable entity
  /users/{id}:
    get:
      tags:
        - user
      summary: Get a user by ID
      description: Get a user by its ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update a user by ID
      description: Update a user by its ID
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '422':
          description: Unprocessable entity
    delete:
      tags:
        - user
      summary: Delete a user by ID
      description: Delete a user by its ID
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

components:
  schemas:
    Product:
      type: object
      properties:
        MyName:
          type: string
          example: 'Updated John kingh'
        MyImage:
          type: string
          example: /images/me.jpg
        MyBrand:
          type: string
          example: tea
        MyCategory:
          type: string
          example: toast
        MyDescription:
          type: string
          example: breakfast
        MyRating:
          type: integer
          example: 1
        MyNumReivews:
          type: integer
          example: 2
        MyPrice:
          type: integer
          example: 23
        ProductCount:
          type: integer
          example: 2
      xml:
        name: pet

    ShippingAddress:
      type: object
      properties:
        fullName:
          type: string
          example: John kingh
        addressLine1:
          type: string
          example: 3 Ballo Road
        addressLine2:
          type: string
          example: Springtown
        city:
          type: string
          example: Derry
        postalCode:
          type: string
          example: BT82 9KL
        country:
          type: string
          example: Northern Ireland

    UserSignup:
      type: object
      required:
        - username
        - password
        - email
        - userType
      properties:
        username:
          type: string
          example: AdminUseJk
        password:
          type: string
          example: adminemaik
        email:
          type: string
          format: email
          example: admin@email2k.com
        userType:
          type: string
          example: Admin

    User:
      type: object
      required:
        - username
        - email
        - userType
      properties:
        username:
          type: string
          example: billllll jjjjjjmjkkbbbb
        email:
          type: string
          format: email
          example: bijjjjjll
        userType:
          type: string
          example: Admin
